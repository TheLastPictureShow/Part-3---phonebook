{"version":3,"sources":["Entry.js","services/entries.js","Persons.js","Notification.js","Form.js","App.js","index.js"],"names":["Entry","name","number","removeEntry","className","onClick","baseUrl","entryService","getAll","request","axios","get","console","log","then","response","data","create","newObject","post","remove","url","delete","Persons","persons","setPersons","sortButton","id","filter","entry","sortedPersons","sort","key","order","a","b","hasOwnProperty","comparison","localeCompare","compareValues","map","el","index","Notification","message","Form","newName","setNewName","newNumber","setNewNumber","handleNameChange","handleNumberChange","setMessage","onSubmit","event","preventDefault","setTimeout","includes","entryObject","concat","value","onChange","type","App","useState","setSortButton","useEffect","initialEntries","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e34fd7b.chunk.js","sourcesContent":["const Entry = ({ name, number, removeEntry }) => {\n  return (\n    <div className=\"entry\">\n      <div>Name: {name}</div>\n      <div>Number: {number}</div>\n\n      <button className=\"btn\" onClick={removeEntry}>\n        Delete\n      </button>\n    </div>\n  );\n};\n\nexport default Entry;\n","import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  console.log(\"Fetched entries are:\", request);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst remove = (url) => {\n  const request = axios.delete(url);\n  return request.then((response) => response.data);\n};\n\nconst entryService = { getAll, create, remove };\n\nexport default entryService;\n","import Entry from \"./Entry\";\nimport entryService from \"./services/entries\";\n\nconst Persons = ({ persons, setPersons, sortButton }) => {\n  // Let's make a function that will remove an entry from the state:\n  const removeEntry = (name, id) => {\n    const url = `/api/persons/${id}`;\n    entryService.remove(url).then((response) => {\n      setPersons(persons.filter((entry) => entry.id !== id));\n    });\n  };\n\n  const compareValues = (key, order = \"asc\") => {\n    return function innerSort(a, b) {\n      if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) return 0;\n      const comparison = a[key].localeCompare(b[key]);\n\n      return order === \"desc\" ? comparison * -1 : comparison;\n    };\n  };\n\n  const sortedPersons = [...persons].sort(compareValues(\"name\"));\n\n  if (sortButton === false) {\n    return sortedPersons.map((el, index) => (\n      <Entry\n        name={el.name}\n        number={el.number}\n        key={index}\n        removeEntry={() => removeEntry(el.name, el.id)}\n      />\n    ));\n  }\n\n  return persons.map((el, index) => (\n    <Entry\n      name={el.name}\n      number={el.number}\n      key={index}\n      removeEntry={() => removeEntry(el.name, el.id)}\n    />\n  ));\n};\n\nexport default Persons;\n","const Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  if (message === \"Name missing! Please input a name\") {\n    return <div className=\"red\">{message}</div>;\n  }\n\n  if (message === \"Number missing! Please input a number\") {\n    return <div className=\"red\">{message}</div>;\n  }\n\n  if (message === \"Name already in phonebook\") {\n    return <div className=\"red\">{message}</div>;\n  }\n\n  return <div className=\"green\">{message}</div>;\n};\n\nexport default Notification;\n","import React from \"react\";\nimport Notification from \"./Notification\";\n// entryService is a module with backend functionality (axios):\nimport entryService from \"./services/entries\";\n\nconst Form = ({\n  newName,\n  setNewName,\n  newNumber,\n  setNewNumber,\n  persons,\n  setPersons,\n  handleNameChange,\n  handleNumberChange,\n  message,\n  setMessage,\n}) => {\n  // Let's add the user entry into the state:\n  const addEntry = (event) => {\n    // First we prevent the default behavior of the form when submitted:\n    event.preventDefault();\n    // Now let's create an object with the new entry:\n    if (!newName) {\n      setMessage(\"Name missing! Please input a name\");\n      setTimeout(() => {\n        setMessage(null);\n      }, 3000);\n    }\n\n    if (!newNumber) {\n      setMessage(\"Number missing! Please input a number\");\n      setTimeout(() => {\n        setMessage(null);\n      }, 3000);\n    }\n\n    const names = persons.map((el) => el.name);\n\n    if (names.includes(newName)) {\n      setMessage(\"Name already in phonebook\");\n      setTimeout(() => {\n        setMessage(null);\n      }, 3000);\n    }\n\n    const entryObject = {\n      name: newName,\n      number: newNumber,\n    };\n    // Let's post the new entry to the server:\n    entryService.create(entryObject).then((response) => {\n      // Let's reset the pieces of state for the input fields to their default values:\n      console.log(\"response is\", response);\n      setNewName(\"\");\n      setNewNumber(\"\");\n      // Let's set a message for the notification:\n      setMessage(`Added ${newName}`);\n      // Let's set a timeout for the notification:\n      setTimeout(() => {\n        setMessage(null);\n      }, 4000);\n      // Let's update the \"persons\" state array with the response from the fulfilled promise:\n      setPersons(persons.concat(response));\n    });\n  };\n  console.log(\"persons is\", persons);\n\n  return (\n    <form className=\"form\" onSubmit={addEntry}>\n      <Notification message={message} />\n      <h2>Add a new:</h2>\n      <div className=\"input\">\n        <p>Name:</p> <input value={newName} onChange={handleNameChange} />\n      </div>\n      <div className=\"input\">\n        <p>Number:</p> <input value={newNumber} onChange={handleNumberChange} />\n      </div>\n      <div>\n        <button className=\"btn\" type=\"submit\">\n          Add\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import React, { useState, useEffect } from \"react\";\nimport Persons from \"./Persons\";\nimport Form from \"./Form\";\n// entryService is a module with backend functionality (axios):\nimport entryService from \"./services/entries\";\nimport \"./App.css\";\n\nconst App = () => {\n  // Let's create our pieces of state:\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [sortButton, setSortButton] = useState(true);\n\n  useEffect(() => {\n    /* Let's get the initial phonebook entries from the database to set\n       the \"persons\" state: */\n    entryService.getAll().then((initialEntries) => {\n      console.log(\"Initial Entries are:\", initialEntries);\n      setPersons(initialEntries);\n    });\n  }, []);\n\n  const handleNameChange = (event) => {\n    // Let's set the user input from the name input field into the \"newName\" piece of state:\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    // Let's do the same, but for the number input field:\n    setNewNumber(event.target.value);\n  };\n\n  const sortAlpha = () => {\n    setSortButton(!sortButton);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"upper\">\n        <h2>Phonebook App</h2>\n        <div>\n          <Form\n            newName={newName}\n            setNewName={setNewName}\n            newNumber={newNumber}\n            setNewNumber={setNewNumber}\n            persons={persons}\n            setPersons={setPersons}\n            handleNameChange={handleNameChange}\n            handleNumberChange={handleNumberChange}\n            message={message}\n            setMessage={setMessage}\n          />\n        </div>\n        <button className=\"btn-alpha\" onClick={sortAlpha}>\n          Sort Alphabetically\n        </button>\n      </div>\n\n      <div className=\"lower\">\n        <Persons\n          persons={persons}\n          setPersons={setPersons}\n          sortButton={sortButton}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}